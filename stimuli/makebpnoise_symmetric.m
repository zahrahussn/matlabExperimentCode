function [images,seed] = makebpnoise(sz,n,f1,f2)% function [images,seed] = makebpnoise(sz,n,f1,f2)%% makes square band-pass noise textures% SZ is size of stimuli, in pixels% N is number of images to generate% F1 is the lower cut-off frequency% F2 is the upper cut-off frequency% defaults: sz = 256; n = 10; f1 = 2; f2 = 4% returns the images in a struct,% labeled "nz1", "nz2", etc.% noise seed is also returned.%% seeds used for stimuli so far:%% NoiseStruct1: [.8;2.1].*1e+09;% NoiseStruct2: [.5;3.5].*1e+09;seed = [.8;2.1].*1e+09;defarg('sz',256);defarg('n',4);defarg('f1',5);defarg('f2',7);checkstr(sz,n,f1,f2);% set staterandn('state',seed);% make filterfilt = makeidealfilt(sz,f1,f2,0);% generatefor i = 1:n	nz = cliprandn(sz,2);	eval(['images.nz',num2str(i),' = real(ifft2(fft2(nz).*ifftshift(filt)));']); %fftunshift changed to ifftshift 2007, ZH	eval(['images.nz',num2str(i),' = images.nz',num2str(i),'* sqrt(.1/stdm(images.nz',num2str(i),')^2);']);     % make bilaterally symmetric  %  eval(['images.nz',num2str(i),'= (images.nz', num2str(i),'+ fliplr(images.nz', num2str(i), '))/ 2;']);	% display	figure; eval(['imshow(Scale(images.nz',num2str(i),'));']);end%organize and savetilefigs;%[file,folder] = uiputfile('NoiseStruct4-8.mat','Save As');% if file% 	save([folder,file],'images','seed');% endreturn;% old code to generate consecutive rings%% defarg('rmin',1);% defarg('rmax',sz);% defarg('spacing','');% defarg('area',pi*rmin^2);% if ~exist('steps','var')% if strcmp(spacing,'log')% 	steps = ceil(logspace(log10(rmin),log10(rmax),n+1));% elseif strcmp(spacing,'lin')% 	steps = round(linspace(rmin,rmax,n+1));% else% 	steps(1) = rmin;% 	for i = 2:n+1% 		steps(i) = radarea(steps(i-1),area);% 	end% end% end% % for i = 1:n% 	eval(['filts.filt',num2str(i),' = makeidealfilt(sz,steps(',num2str(i),'),steps(',num2str(i+1),'),0);']);% 	nz = cliprandn(sz,2);% 	eval(['images.nz',num2str(i),' = real(ifft2(fft2(nz).*fftunshift(filts.filt',num2str(i),')));']);% 	eval(['images.nz',num2str(i),' = images.nz',num2str(i),'* sqrt(.1/stdm(images.nz',num2str(i),')^2);']); % 	figure; eval(['imshow(scale(images.nz',num2str(i),'));']);% end